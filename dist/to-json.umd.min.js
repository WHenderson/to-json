!function(t,n){"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?module.exports=n():t.toJson=n()}(this,function(){var t,n,o,e,r,a,s={}.hasOwnProperty,i=function(t,n){function o(){this.constructor=t}for(var e in n)s.call(n,e)&&(t[e]=n[e]);return o.prototype=n.prototype,t.prototype=new o,t.__super__=n.prototype,t},u=[].slice;return t=function(){function t(n,o){return this.data=n,this instanceof t?void(null!=o&&(this.dataKey=o.dataKey,this.jsonKey=o.jsonKey,this.parentContext=o.parentContext)):new t(this.data,o).apply()}return t.prototype.childContextClass=t,t.prototype.apply=function(t){return this._exclude()?void 0:(this._convertData(),this._excludeData()?void 0:(this._toJson(t),this._excludeJson()?void 0:this.json))},t.prototype._toJson=function(t){var n,o;this.json=t||null==(null!=(n=this.data)?n.toJson:void 0)||"function"!=typeof this.data.toJson?t||null==(null!=(o=this.data)?o.toJSON:void 0)||"function"!=typeof this.data.toJSON?this._getEnumerator()(this._toJsonNamed.bind(this)):this.data.toJSON():this.data.toJson(this)},t.prototype._getEnumeratorArray=function(){return function(t){return function(n){var o,e,r,a,s;for(t.json=[],s=t.data,r=e=0,a=s.length;a>e;r=++e)o=s[r],n(o,r,t._getJsonIndex(r));return t.json}}(this)},t.prototype._getEnumeratorObject=function(){return function(t){return function(n){var o,e,r;t.json={},e=t.data;for(o in e)s.call(e,o)&&(r=e[o],n(r,o,t._getJsonKey(o)));return t.json}}(this)},t.prototype._getEnumeratorValue=function(){return function(t){return function(){return t.json=t.data,t.json}}(this)},t.prototype._getEnumerator=function(){return Array.isArray(this.data)?this._getEnumeratorArray():"object"==typeof this.data&&null!==this.data?this._getEnumeratorObject():this._getEnumeratorValue()},t.prototype._toJsonNamed=function(t,n,o){var e,r;return e=this._createChildContext(t,n,o),r=e.apply(),void 0!==r&&(this.json[o]=r),e},t.prototype._createChildContext=function(t,n,o){return new this.childContextClass(t,{dataKey:n,jsonKey:o,parentContext:this})},t.prototype.adjustContext=function(t,n){var o,e;for(o in t)s.call(t,o)&&(e=t[o],this[o]=e);return n&&this.adjustChildContexts(t,n),this},t.prototype.adjustChildContexts=function(t,n){var o,e;this.childContextClass=function(t){function n(){return n.__super__.constructor.apply(this,arguments)}return i(n,t),n}(this.childContextClass);for(o in t)s.call(t,o)&&(e=t[o],this.childContextClass.prototype[o]=e);return n&&(this.childContextClass.prototype.childContextClass=this.childContextClass),this},t.prototype._super=function(t){var n;return this[t]!==this.constructor.prototype[t]?this.constructor.prototype[t]:null!=(n=this.constructor.__super__)?n[t]:void 0},t.prototype._callSuper=function(){var t,n;return n=arguments[0],t=2<=arguments.length?u.call(arguments,1):[],this._super(n).apply(this,t)},t.prototype._getJsonKey=function(t){return t},t.prototype._getJsonIndex=function(t){return this.json.length},t.prototype._exclude=function(){return!1},t.prototype._convertData=function(){},t.prototype._excludeData=function(){return!1},t.prototype._excludeJson=function(){return!1},t.prototype.dataPath=function(){var t,n;for(n=[],t=this;null!=t;)null!=t.dataKey&&n.unshift(t.dataKey),t=t.parentContext;return n},t.prototype.jsonPath=function(){var t,n;for(n=[],t=this;null!=t;)null!=t.jsonKey&&n.unshift(t.jsonKey),t=t.parentContext;return n},t}(),e=function(t){function n(t,o){var e,r;n.__super__.constructor.call(this,t,o),this.pathMap=null!=(e=null!=(r=this.parentContext)?r.pathMap:void 0)?e:{}}return i(n,t),n.prototype.childContextClass=n,n.prototype._toJsonNamed=function(t,o,e){var r;return r=n.__super__._toJsonNamed.call(this,t,o,e),void 0!==this.json[e]&&(this.pathMap[r.jsonPath().join("/")]=r.dataPath().join("/")),r},n}(t),t.WithPathMap=e,a=function(t){var n;for(n in t)if(s.call(t,n))return!1;return!0},r=function(t){function n(t,o){n.__super__.constructor.call(this,t,o),this.pathTree={}}return i(n,t),n.prototype.childContextClass=n,n.prototype._toJsonNamed=function(t,o,e){var r;r=n.__super__._toJsonNamed.call(this,t,o,e),void 0!==this.json[e]&&(this.pathTree[r.jsonKey]=a(r.pathTree)?{id:r.dataKey}:{id:r.dataKey,children:r.pathTree})},n}(t),t.WithPathTree=r,n=function(t){function n(t,o){var e,r;n.__super__.constructor.call(this,t,o),this.dataMap=null!=(e=null!=(r=this.parentContext)?r.dataMap:void 0)?e:{}}return i(n,t),n.prototype.childContextClass=n,n.prototype._toJsonNamed=function(t,o,e){var r;return r=n.__super__._toJsonNamed.call(this,t,o,e),void 0!==this.json[e]&&(this.dataMap[r.jsonPath().join("/")]={dataPath:r.dataPath().join("/"),data:t,convertedData:r.data,json:this.json[e]}),r},n}(t),t.WithDataMap=n,o=function(t){function n(t,o){n.__super__.constructor.call(this,t,o),this.dataTree={}}return i(n,t),n.prototype.childContextClass=n,n.prototype._toJsonNamed=function(t,o,e){var r;return r=n.__super__._toJsonNamed.call(this,t,o,e),void 0!==this.json[e]&&(this.dataTree[r.jsonKey]={id:r.dataKey,data:t,convertedData:r.data,json:this.json[e]},a(r.dataTree)||(this.dataTree[r.jsonKey].children=r.dataTree)),r},n}(t),t.WithDataTree=o,t});
//# sourceMappingURL=data:application/json;base64,